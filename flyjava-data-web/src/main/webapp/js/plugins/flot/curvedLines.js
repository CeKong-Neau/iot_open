(function(C){var A={series:{curvedLines:{active:false,apply:false,fit:false,curvePointFactor:20,fitPointDist:undefined}}};function B(E){E.hooks.processOptions.push(F);function F(I,H){if(H.series.curvedLines.active){I.hooks.processDatapoints.unshift(G)}}function G(I,P,O){var M=O.points.length/O.pointsize;var J=0.5;if(P.curvedLines.apply==true&&P.originSeries===undefined&&M>(1+J)){if(P.lines.fill){var K=D(O,P.curvedLines,1),Q=D(O,P.curvedLines,2);O.pointsize=3;O.points=[];var N=0;var L=0;var R=0;var H=2;while(R<K.length||N<Q.length){if(K[R]==Q[N]){O.points[L]=K[R];O.points[L+1]=K[R+1];O.points[L+2]=Q[N+1];N+=H;R+=H}else{if(K[R]<Q[N]){O.points[L]=K[R];O.points[L+1]=K[R+1];O.points[L+2]=L>0?O.points[L-1]:null;R+=H}else{O.points[L]=Q[N];O.points[L+1]=L>1?O.points[L-2]:null;O.points[L+2]=Q[N+1];N+=H}}L+=3}}else{if(P.lines.lineWidth>0){O.points=D(O,P.curvedLines,1);O.pointsize=2}}}}function D(I,J,P){var g=I.points,W=I.pointsize;var M=J.curvePointFactor*(g.length/W);var H=new Array;var K=new Array;var V=-1;var O=-1;var l=0;if(J.fit){var x;if(typeof J.fitPointDist=="undefined"){var L=g[0];var T=g[g.length-W];x=(T-L)/(500*100)}else{x=J.fitPointDist}for(var q=0;q<g.length;q+=W){var S;var R;V=q;O=q+P;S=g[V]-x;R=g[V]+x;var X=2;while(S==g[V]||R==g[V]){S=g[V]-(x*X);R=g[V]+(x*X);X++}H[l]=S;K[l]=g[O];l++;H[l]=g[V];K[l]=g[O];l++;H[l]=R;K[l]=g[O];l++}}else{for(var q=0;q<g.length;q+=W){V=q;O=q+P;H[l]=g[V];K[l]=g[O];l++}}var r=H.length;var N=new Array();var Y=new Array();N[0]=0;N[r-1]=0;Y[0]=0;for(var q=1;q<r-1;++q){var y=(H[q+1]-H[q-1]);if(y==0){return[]}var e=(H[q]-H[q-1])/y;var f=e*N[q-1]+2;N[q]=(e-1)/f;Y[q]=(K[q+1]-K[q])/(H[q+1]-H[q])-(K[q]-K[q-1])/(H[q]-H[q-1]);Y[q]=(6*Y[q]/(H[q+1]-H[q-1])-e*Y[q-1])/f}for(var l=r-2;l>=0;--l){N[l]=N[l]*N[l+1]+Y[l]}var c=(H[r-1]-H[0])/(M-1);var Q=new Array;var u=new Array;var v=new Array;Q[0]=H[0];u[0]=K[0];v.push(Q[0]);v.push(u[0]);for(l=1;l<M;++l){Q[l]=Q[0]+l*c;var t=r-1;var Z=0;while(t-Z>1){var m=Math.round((t+Z)/2);if(H[m]>Q[l]){t=m}else{Z=m}}var o=(H[t]-H[Z]);if(o==0){return[]}var w=(H[t]-Q[l])/o;var U=(Q[l]-H[Z])/o;u[l]=w*K[Z]+U*K[t]+((w*w*w-w)*N[Z]+(U*U*U-U)*N[t])*(o*o)/6;v.push(Q[l]);v.push(u[l])}return v}}C.plot.plugins.push({init:B,options:A,name:"curvedLines",version:"0.5"})})(jQuery);